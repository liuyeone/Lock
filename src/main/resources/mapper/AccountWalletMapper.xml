<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.lock.dao.AccountWalletMapper">
    <resultMap id="BaseResultMap" type="com.example.lock.entity.AccountWallet">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_open_id" property="userOpenId" jdbcType="VARCHAR"/>
        <result column="user_amount" property="userAmount" jdbcType="DECIMAL"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="pay_password" property="payPassword" jdbcType="VARCHAR"/>
        <result column="is_open" property="isOpen" jdbcType="INTEGER"/>
        <result column="check_key" property="checkKey" jdbcType="VARCHAR"/>
        <result column="version" property="version" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, user_open_id, user_amount, create_time, update_time, pay_password, is_open, check_key, 
    version
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.lock.entity.AccountWalletExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from account_wallet
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from account_wallet
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByPrimaryKeyForPessimistic" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from account_wallet
        where id = #{id,jdbcType=INTEGER}
        for update
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account_wallet
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.example.lock.entity.AccountWalletExample">
        delete from account_wallet
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.example.lock.entity.AccountWallet">
    insert into account_wallet (id, user_open_id, user_amount, 
      create_time, update_time, pay_password, 
      is_open, check_key, version
      )
    values (#{id,jdbcType=INTEGER}, #{userOpenId,jdbcType=VARCHAR}, #{userAmount,jdbcType=DECIMAL}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{payPassword,jdbcType=VARCHAR}, 
      #{isOpen,jdbcType=INTEGER}, #{checkKey,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.example.lock.entity.AccountWallet">
        insert into account_wallet
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userOpenId != null">
                user_open_id,
            </if>
            <if test="userAmount != null">
                user_amount,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="payPassword != null">
                pay_password,
            </if>
            <if test="isOpen != null">
                is_open,
            </if>
            <if test="checkKey != null">
                check_key,
            </if>
            <if test="version != null">
                version,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userOpenId != null">
                #{userOpenId,jdbcType=VARCHAR},
            </if>
            <if test="userAmount != null">
                #{userAmount,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="payPassword != null">
                #{payPassword,jdbcType=VARCHAR},
            </if>
            <if test="isOpen != null">
                #{isOpen,jdbcType=INTEGER},
            </if>
            <if test="checkKey != null">
                #{checkKey,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                #{version,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.lock.entity.AccountWalletExample"
            resultType="java.lang.Integer">
        select count(*) from account_wallet
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <!--用户钱包数据更改 ，通过乐观锁(version机制)实现 -->
    <update id="updateAccountWallet" parameterType="com.example.lock.entity.AccountWallet">
        <![CDATA[
          	update account_wallet set user_amount = #{userAmount,jdbcType=DECIMAL}, version = version + 1 where id =#{id,jdbcType=INTEGER} and version = #{version,jdbcType=INTEGER}
           ]]>
    </update>
    <update id="updateByExampleSelective" parameterType="map">
        update account_wallet
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userOpenId != null">
                user_open_id = #{record.userOpenId,jdbcType=VARCHAR},
            </if>
            <if test="record.userAmount != null">
                user_amount = #{record.userAmount,jdbcType=DECIMAL},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.payPassword != null">
                pay_password = #{record.payPassword,jdbcType=VARCHAR},
            </if>
            <if test="record.isOpen != null">
                is_open = #{record.isOpen,jdbcType=INTEGER},
            </if>
            <if test="record.checkKey != null">
                check_key = #{record.checkKey,jdbcType=VARCHAR},
            </if>
            <if test="record.version != null">
                version = #{record.version,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update account_wallet
        set id = #{record.id,jdbcType=INTEGER},
        user_open_id = #{record.userOpenId,jdbcType=VARCHAR},
        user_amount = #{record.userAmount,jdbcType=DECIMAL},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        pay_password = #{record.payPassword,jdbcType=VARCHAR},
        is_open = #{record.isOpen,jdbcType=INTEGER},
        check_key = #{record.checkKey,jdbcType=VARCHAR},
        version = #{record.version,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.lock.entity.AccountWallet">
        update account_wallet
        <set>
            <if test="userOpenId != null">
                user_open_id = #{userOpenId,jdbcType=VARCHAR},
            </if>
            <if test="userAmount != null">
                user_amount = #{userAmount,jdbcType=DECIMAL},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="payPassword != null">
                pay_password = #{payPassword,jdbcType=VARCHAR},
            </if>
            <if test="isOpen != null">
                is_open = #{isOpen,jdbcType=INTEGER},
            </if>
            <if test="checkKey != null">
                check_key = #{checkKey,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.lock.entity.AccountWallet">
    update account_wallet
    set user_open_id = #{userOpenId,jdbcType=VARCHAR},
      user_amount = #{userAmount,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      pay_password = #{payPassword,jdbcType=VARCHAR},
      is_open = #{isOpen,jdbcType=INTEGER},
      check_key = #{checkKey,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>